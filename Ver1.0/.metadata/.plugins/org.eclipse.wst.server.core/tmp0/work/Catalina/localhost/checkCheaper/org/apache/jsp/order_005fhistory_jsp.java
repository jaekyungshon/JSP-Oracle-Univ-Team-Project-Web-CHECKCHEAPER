/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.83
 * Generated at: 2023-12-14 14:17:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.sql.*;
import checkCheaper.Goods;
import java.sql.*;

public final class order_005fhistory_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/menu.jsp", Long.valueOf(1702290992034L));
    _jspx_dependants.put("/dbConn.jsp", Long.valueOf(1701512816197L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("checkCheaper.Goods");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
 
Connection conn = null;
try{
	String url = "jdbc:mysql://localhost:3306/testdb";
	String user = "root";
	String password = "hansung";
	
	Class.forName("com.mysql.jdbc.Driver");
	conn = DriverManager.getConnection(url, user, password);
	//System.out.println("데이터베이스 연결 성공");
} catch (SQLException ex) {
	System.out.println("데이터베이스 연결 실패");
}

      out.write("\r\n");
      out.write("\r\n");

String userID = (String)session.getAttribute("userID");


      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<title>CheckCheaper</title>\r\n");
      out.write("<!-- Bootstrap CDN -->\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.6.3.min.js\" integrity=\"sha256-\r\n");
      out.write("pvPw+upLPUjgMXY0G+8O0xUf+/Im1MZjXxxgOcBQBXU=\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css\" integrity=\"sha384-\r\n");
      out.write("xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N\" crossorigin=\"anonymous\">\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js\"\r\n");
      out.write("integrity=\"sha384-Fy6S3B9q64WdZWQUiU+q4/2Lc9npb8tCaSX9FK7E8HnRr0Jz8D6OP9dO5Vg3Q9ct\"\r\n");
      out.write("crossorigin=\"anonymous\"></script>\r\n");
      out.write("<!-- CSS -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/footer.css\" type=\"text/css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/dash_section_input.css\" type=\"text/css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");
      out.write('\r');
      out.write('\n');
      out.write('	');
      out.write('\r');
      out.write('\n');

String memberType = (String)session.getAttribute("userType");

      out.write("\r\n");
      out.write("<nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n");
      out.write("  <div class=\"container-fluid\">\r\n");
      out.write("    <a class=\"navbar-brand\" href=\"./login.jsp\">logout</a>\r\n");
      out.write("    <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n");
      out.write("      <span class=\"navbar-toggler-icon\"></span>\r\n");
      out.write("      ");
      out.write("\r\n");
      out.write("      <a class=\"navbar-brand\" href=\"dash.jsp?flag=0\">Home</a>\r\n");
      out.write("      <a class=\"navbar-brand\" href=\"order_history.jsp\">Past Order</a>\r\n");
      out.write("      <a class=\"navbar-brand\" href=\"#\">Book Mark</a>\r\n");
      out.write("      <a class=\"navbar-brand\" href=\"cart.jsp\">Cart</a>\r\n");
      out.write("    </button>\r\n");
      out.write("    <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n");
      out.write("      <ul class=\"navbar-nav\">\r\n");
      out.write("        <li class=\"nav-item\">\r\n");
      out.write("          <a class=\"nav-link active\" aria-current=\"page\" href=\"dash.jsp?flag=0\">Home</a>\r\n");
      out.write("        </li>\r\n");
      out.write("        <li class=\"nav-item\">\r\n");
      out.write("          <a class=\"nav-link\" href=\"#\">즐겨찾기</a>\r\n");
      out.write("        </li>\r\n");
      out.write("        <li class=\"nav-item\">\r\n");
      out.write("          <a class=\"nav-link\" href=\"order_history.jsp\">주문내역</a>\r\n");
      out.write("        </li>\r\n");
      out.write("        <li class=\"nav-item\">\r\n");
      out.write("          <a class=\"nav-link\" href=\"cart.jsp\">장바구니</a>\r\n");
      out.write("        </li>\r\n");
      out.write("        ");

        if(memberType.equals("store")){
        
      out.write("\r\n");
      out.write("        <li class=\"nav-item\">\r\n");
      out.write("          <a class=\"nav-link\" href=\"request_goods.jsp\">상품요청</a>\r\n");
      out.write("        </li>\r\n");
      out.write("        <li class=\"nav-item\">\r\n");
      out.write("          <a class=\"nav-link\" href=\"store_inventory.jsp\">재고관리</a>\r\n");
      out.write("        </li>\r\n");
      out.write("        <li class=\"nav-item\">\r\n");
      out.write("          <a class=\"nav-link\" href=\"store_release.jsp\">출고관리</a>\r\n");
      out.write("        </li>\r\n");
      out.write("        ");

        }
        
      out.write("\r\n");
      out.write("        ");

        if(memberType.equals("admin")){
        
      out.write("\r\n");
      out.write("        <li class=\"nav-item\">\r\n");
      out.write("          <a class=\"nav-link\" href=\"confirm_request_goods.jsp\">상품요청확인</a>\r\n");
      out.write("        </li>\r\n");
      out.write("        ");

        }
        
      out.write("\r\n");
      out.write("      </ul>\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("</nav>");
      out.write('\r');
      out.write('\n');
      out.write('	');
      out.write("\r\n");
      out.write("	<div class=\"jumbotron\">\r\n");
      out.write("		<div class=\"container\">\r\n");
      out.write("			<h1 class=\"display-2\"><strong>Your Order History</strong></h1>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	<div class=\"container\">\r\n");
      out.write("		<div class=\"container\">\r\n");
      out.write("			<div class=\"text-center\">\r\n");
      out.write("				");

				out.println("<h3>");
				out.println("Hello, "+userID+"! You can check to your order history!");
				out.println("</h3>");
				
      out.write("\r\n");
      out.write("				<br><br>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	<hr>\r\n");
      out.write("	");
      out.write('\r');
      out.write('\n');
      out.write('	');

		PreparedStatement pstmt = null;
		String sql = "";
		ResultSet rs = null;
		
		// 주문정보 join 배송 레코드 가져오기
		sql="SELECT orderinfo.ORDR_ID, ORDR_PAY, ORDR_YMD, ORDR_ADDR, ORDR_TELNO, DELIVERY_YMD, DELIVERY_BZENT_NM "
		   +"FROM orderinfo, delivery "
		   +"WHERE orderinfo.ORDR_ID=delivery.ORDR_ID and MBR_ID=?";
		pstmt=conn.prepareStatement(sql);
		pstmt.setString(1,userID);
		rs=pstmt.executeQuery();
		ArrayList<String>[] orderInfo_join_delivery = new ArrayList[100];
		String nameOneList[] = {"ORDR_ID","ORDR_PAY","ORDR_YMD","ORDR_ADDR","ORDR_TELNO","DELIVERY_YMD","DELIVERY_BZENT_NM"};
		int cartCount=0; // 주문정보 레코드 개수
		while(rs.next()){
			ArrayList<String> tmp = new ArrayList<String>();
			for(int i=0; i<nameOneList.length; i++)
				tmp.add(rs.getString(nameOneList[i]));
			orderInfo_join_delivery[cartCount++]=tmp;
		}
		System.out.println("주문정보 join 배송");
		for(int i=0; i<cartCount; i++){
			for(String e : orderInfo_join_delivery[i]){
				System.out.print(e+" ");
			}
			System.out.println();
		}
		
		// 주문상세 join 재고 join 상품
		ArrayList<String>[] orderdetail_join_inventory_join_goods = new ArrayList[200];
		String nameTwoList[] = {"ORDERDETAIL_ID","ORDERDETAIL_CNT","IVT_GDS_AMT","GDS_NM"};
		int[] goodsCount=new int[cartCount]; // 각 주문 레코드의 주문상세 레코드 개수.
		// [3,1,3,2,2]
		for(int i=0; i<cartCount; i++){
			goodsCount[i]=0;
		}
		// [[[메론,17000,3,51000], [건포도], [배추]], [[적상추]], [[아보카도, 건포도, 단감]]]
		// [[메론,17000,3,51000],[건포도,487,5,2435],[배추],[적상추],[아보카도],...]
		// 11/27: list[0] = {메론, 건포도, 배추} 0~3
		// 11/30 : list[1] = {적상추}
		// [2,0,0,0,0]
		sql="SELECT ORDERDETAIL_ID, ORDERDETAIL_CNT, IVT_GDS_AMT, GDS_NM "
		   +"FROM orderdetail, inventory, goods "
		   +"WHERE ORDR_ID=? and orderdetail.IVT_ID=inventory.IVT_ID and inventory.GDS_ID=goods.GDS_ID";
		pstmt=conn.prepareStatement(sql);
		for(int i=0; i<cartCount; i++){
			int ordr_id = Integer.parseInt(orderInfo_join_delivery[i].get(0));
			pstmt.setInt(1, ordr_id);
			rs=pstmt.executeQuery();
			while(rs.next()){
				ArrayList<String> tmp = new ArrayList<String>();
				for(int j=0; j<nameTwoList.length; j++)
					tmp.add(rs.getString(nameTwoList[j]));
				int tmpIdx=0;
				for(int j=0; j<=i; j++){
					tmpIdx+=goodsCount[j];
				}
				orderdetail_join_inventory_join_goods[tmpIdx]=tmp;
				goodsCount[i]=goodsCount[i]+1;
			}
		}
		System.out.println("주문상세 join 재고 join 상품");
		int tmpLen = 0;
		for(int i=0; i<cartCount; i++) tmpLen+=goodsCount[i];
		for(int i=0; i<tmpLen; i++){
			for(String e : orderdetail_join_inventory_join_goods[i])
				System.out.print(e+" ");
			System.out.println("");
		}
		
		//할인가 찾기 : 주문상세코드를 이용하여, ivt_id를 찾고, discount에서 할인가 검색.
		int dcCount=0; // 픔목 총 개수.
		int dcIdx=0; // 품목 현재 인덱스.
		for(int i=0; i<goodsCount.length; i++){
			dcCount+=goodsCount[i];
		}
		
		sql = "SELECT * FROM orderinfo WHERE MBR_ID=?";
		pstmt=conn.prepareStatement(sql);
		pstmt.setString(1,userID);
		rs=pstmt.executeQuery();
		ArrayList<String>user_ordr_id = new ArrayList<>(); // 0,1,2,3,4,5
		while(rs.next()){
			user_ordr_id.add(rs.getString("ORDR_ID"));
		}
		
		for(int i=0; i<user_ordr_id.size(); i++){
			sql = "SELECT * from orderdetail left outer join discount using(IVT_ID) where ORDR_ID=?";
			pstmt=conn.prepareStatement(sql);
			pstmt.setInt(1,Integer.parseInt(user_ordr_id.get(i)));
			rs=pstmt.executeQuery();
			while(rs.next()){
				if(dcIdx>=dcCount) break;
				String e = rs.getString("DSCNT_AMT");
				//System.out.println("dc: "+dcIdx);
				//System.out.println("dcS: "+orderdetail_join_inventory_join_goods[dcIdx]);
				if(e==null) orderdetail_join_inventory_join_goods[dcIdx].add("0");
				else orderdetail_join_inventory_join_goods[dcIdx].add(e);
				dcIdx+=1;
			}
		}
		
		for(int i=0; i<dcCount; i++){ // 품목 리스트 출력
			System.out.println(orderdetail_join_inventory_join_goods[i]);
		}
		
		// 멤버십 할인가 찾기 : session userID를 이용하여 멤버십 테이블 접근
		int membershipPrice = 0;
		sql = "SELECT * from member, membership "
			+ "WHERE member.MS_ID=membership.MS_ID and MBR_ID=?";
		pstmt=conn.prepareStatement(sql);
		pstmt.setString(1,userID);
		rs=pstmt.executeQuery();
		while(rs.next()){
			membershipPrice = Integer.parseInt(rs.getString("MS_DSCNT_AMT"));
		}
	
      out.write("\r\n");
      out.write("	<div class=\"container\" id=\"wrap\">\r\n");
      out.write("		<div class=\"accordion\" id=\"accordionExample\">\r\n");
      out.write("			");
      out.write("\r\n");
      out.write("			");

			for(int i=0; i<cartCount; i++){
			
      out.write("\r\n");
      out.write("				<div class=\"card\">\r\n");
      out.write("					");
      out.write("\r\n");
      out.write("					<div class=\"card-header\" id=\"heading");
      out.print(i );
      out.write("\">\r\n");
      out.write("						<h2 class=\"mb-0\">\r\n");
      out.write("							<button class=\"btn btn-link btn-block text-left\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapse");
      out.print(i );
      out.write("\" aria-expanded=\"true\" aria-controls=\"collapse");
      out.print(i );
      out.write("\">\r\n");
      out.write("								");
      out.print(orderInfo_join_delivery[i].get(2) );
      out.write("\r\n");
      out.write("					        </button>\r\n");
      out.write("						</h2>\r\n");
      out.write("					</div>\r\n");
      out.write("					");
      out.write("\r\n");
      out.write("					<div id=\"collapse");
      out.print(i );
      out.write("\" class=\"collapse show\" aria-labelledby=\"heading");
      out.print(i );
      out.write("\" data-parent=\"#accordionExample\">\r\n");
      out.write("				      <div class=\"card-body\">\r\n");
      out.write("				        <table class=\"table\" style=\"text-align:center;\">\r\n");
      out.write("				        	<thead class=\"thead-light\">\r\n");
      out.write("				        		<tr><th scope=\"col\">주문코드</th><th scope=\"col\" rowspan=\"2\" colspan=\"3\">주문명세서</th></tr>\r\n");
      out.write("				        		<tr><td>");
      out.print(orderInfo_join_delivery[i].get(0) );
      out.write("</td></tr>\r\n");
      out.write("				        		<tr><th scope=\"col\">주문일자</th><th scope=\"col\">주문자 전화번호</th><th scope=\"col\">수령지</th><th scope=\"col\"></th></tr>\r\n");
      out.write("				        		<tr><td>");
      out.print(orderInfo_join_delivery[i].get(2) );
      out.write("</td><td>");
      out.print(orderInfo_join_delivery[i].get(4) );
      out.write("</td><td>");
      out.print(orderInfo_join_delivery[i].get(3) );
      out.write("</td></tr>\r\n");
      out.write("				        		<tr><th scope=\"col\" colspan=\"4\">담당 배송업체</th></tr>\r\n");
      out.write("				        		<tr><td colspan=\"4\">");
      out.print(orderInfo_join_delivery[i].get(6) );
      out.write("</td></tr>\r\n");
      out.write("				        	</thead>\r\n");
      out.write("				        	<tbody class=\"thead-light\">\r\n");
      out.write("				        		<tr><th scope=\"col\">품 목</th><th scope=\"col\">단 가</th><th scope=\"col\">수 량</th><th scope=\"col\">가 격(단가*수량 - 할인가*수량)</th></tr>\r\n");
      out.write("				        		");

				        		// 품목 출력을 위한 세팅
				        		int start=0;
				        		int end=0;
				        		int fi_total_price=0; // 전체 품목 가격(단가*수량 총합 - 할인가*수량)
				        		// start 정하기
				        		for(int j=0; j<i; j++){
				        			start+=goodsCount[j];
				        		}
				        		// end 정하기
				        		for(int j=0; j<=i; j++){
				        			end+=goodsCount[j];
				        		}
				        		// 구매한 상품들 출력
				        		for(int j=start; j<end; j++){
				        			int tmpPrice=(Integer.parseInt(orderdetail_join_inventory_join_goods[j].get(2)) * Integer.parseInt(orderdetail_join_inventory_join_goods[j].get(1)));
				        			int tmpDiscountPrice = Integer.parseInt(orderdetail_join_inventory_join_goods[j].get(4)) * Integer.parseInt(orderdetail_join_inventory_join_goods[j].get(1));
				        			fi_total_price+=(tmpPrice-tmpDiscountPrice);
				        			out.println("<tr>");
				        			out.println("<td>"+orderdetail_join_inventory_join_goods[j].get(3)+"</td>"); // 품목
				        			out.println("<td>"+orderdetail_join_inventory_join_goods[j].get(2)+"</td>"); // 단가
				        			out.println("<td>"+orderdetail_join_inventory_join_goods[j].get(1)+"</td>"); // 수량
				        			out.println("<td>"+String.format("%d-%d=%d원",tmpPrice,tmpDiscountPrice,tmpPrice-tmpDiscountPrice)+"</td>"); // 가격
				        			out.println("/<tr>");
				        		}
				        		
      out.write("\r\n");
      out.write("				        		<tr><th scope=\"col\" colspan=\"2\">합 계(품목총가-멤버십할인혜택)</th><td colspan=\"2\">");
      out.print(String.format("%d-%d=%d원",fi_total_price,membershipPrice,fi_total_price-membershipPrice<0 ? 0:fi_total_price-membershipPrice) );
      out.write("</td></tr>\r\n");
      out.write("				        		<tr>\r\n");
      out.write("				        			<th scope=\"col\">결제수단</th>\r\n");
      out.write("				        			<td>\r\n");
      out.write("				        				");

				        				int pay = Integer.parseInt(orderInfo_join_delivery[i].get(1));
				        				if(pay==0) out.println("현금");
				        				else out.println("카드");
				        				
      out.write("\r\n");
      out.write("				        			</td>\r\n");
      out.write("				        			<th scope=\"col\">검수자(인)</th>\r\n");
      out.write("				        			<td>운영자(ADMIN)</td>\r\n");
      out.write("				        		</tr>\r\n");
      out.write("				        	</tbody>\r\n");
      out.write("				        </table>\r\n");
      out.write("				      </div>\r\n");
      out.write("				    </div>\r\n");
      out.write("				</div>\r\n");
      out.write("			");
	
			}
			
      out.write("\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");

if(rs!=null){
	rs.close();
}
if(pstmt!=null){
	pstmt.close();
}
if(conn!=null){
	conn.close();
}

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
