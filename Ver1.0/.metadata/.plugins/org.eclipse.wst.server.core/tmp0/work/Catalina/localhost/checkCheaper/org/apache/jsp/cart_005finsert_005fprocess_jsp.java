/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.83
 * Generated at: 2023-12-07 12:29:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.sql.*;
import checkCheaper.Goods;
import java.sql.*;

public final class cart_005finsert_005fprocess_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/dbConn.jsp", Long.valueOf(1701512816197L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("checkCheaper.Goods");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
 
Connection conn = null;
try{
	String url = "jdbc:mysql://localhost:3306/testdb";
	String user = "root";
	String password = "hansung";
	
	Class.forName("com.mysql.jdbc.Driver");
	conn = DriverManager.getConnection(url, user, password);
	//System.out.println("데이터베이스 연결 성공");
} catch (SQLException ex) {
	System.out.println("데이터베이스 연결 실패");
}

      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');

String cartFlag = request.getParameter("cartFlag");
String IVT_ID = request.getParameter("IVT_ID");
ArrayList<Goods> list;

      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');

PreparedStatement pstmt = null;
String sql = "SELECT * FROM inventory WHERE IVT_ID = ?";
ResultSet rs = null;

pstmt = conn.prepareStatement(sql);
pstmt.setInt(1, Integer.parseInt(IVT_ID));
rs = pstmt.executeQuery();

String GDS_NM = request.getParameter("GDS_NM");
String FRCS_NM = request.getParameter("FRCS_NM");
String FRCS_CO_ADDR = request.getParameter("FRCS_CO_ADDR");
rs.next();
String IVT_GRD_LEVEL = rs.getString("IVT_GRD_LEVEL");
String IVT_CNT = rs.getString("IVT_CNT");
String IVT_GDS_AMT = rs.getString("IVT_GDS_AMT");


      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');


list=(ArrayList<Goods>)session.getAttribute("cartlist");
Goods product = new Goods();
if(list==null){
	list=new ArrayList<Goods>();
}
else{
	session.removeAttribute("cartlist");
}
product.setInventoryKey(Integer.parseInt(IVT_ID));
product.setGoodsName(GDS_NM);
product.setFranchiseName(FRCS_NM);
product.setFranchiseAddress(FRCS_CO_ADDR);
product.setGoodsLevel(IVT_GRD_LEVEL);
product.setQuantity(IVT_CNT);
product.setPrice(IVT_GDS_AMT);
System.out.println("장바구니에 추가: "+product.getGoodsName());

      out.write('\r');
      out.write('\n');

if(list.size()!=0){
	boolean c = true;
	for(Goods t : list){
		if(t.getGoodsName().equals(product.getGoodsName()) && t.getFranchiseName().equals(product.getFranchiseName())){
			c=false; break;
		}
	}
	if(c){
		list.add(product);
		System.out.println("장바구니 담기 성공");
	}
	else{
		System.out.println("장바구니에 이미 존재");
	}
}
else{
	list.add(product);
}

session.setAttribute("cartlist", list);
if(cartFlag.equals("0")){

      out.write('\r');
      out.write('\n');
      if (true) {
        _jspx_page_context.forward("dash.jsp?flag=1");
        return;
      }
      out.write('\r');
      out.write('\n');

}

      out.write('\r');
      out.write('\n');

if(cartFlag.equals("1")){
	response.sendRedirect("cart.jsp");
}

      out.write('\r');
      out.write('\n');

if(rs!=null){
	rs.close();
}
if(pstmt!=null){
	pstmt.close();
}
if(conn!=null){
	conn.close();
}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
