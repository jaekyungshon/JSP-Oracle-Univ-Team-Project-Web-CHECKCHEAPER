/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.83
 * Generated at: 2023-12-14 10:04:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.sql.*;
import java.time.*;
import checkCheaper.Goods;
import java.sql.*;

public final class order_005fprocess_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/menu.jsp", Long.valueOf(1702290992034L));
    _jspx_dependants.put("/dbConn.jsp", Long.valueOf(1701512816197L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("java.time");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("checkCheaper.Goods");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
 
Connection conn = null;
try{
	String url = "jdbc:mysql://localhost:3306/testdb";
	String user = "root";
	String password = "hansung";
	
	Class.forName("com.mysql.jdbc.Driver");
	conn = DriverManager.getConnection(url, user, password);
	//System.out.println("데이터베이스 연결 성공");
} catch (SQLException ex) {
	System.out.println("데이터베이스 연결 실패");
}

      out.write('\r');
      out.write('\n');

ArrayList<Goods> cartList = (ArrayList<Goods>)session.getAttribute("cartlist"); // 주문한 장바구니 상품들
String curDate = LocalDate.now().toString(); // 주문일자(현재 날짜 기준)
String devDate=""; // 배송일자
int total_price=0; // 주문총금액
String orderName = request.getParameter("orderName"); // 수령인
String orderAddress = request.getParameter("orderAddress"); // 수령지
String orderTel = request.getParameter("orderPhone"); // 수령인전화번호
String orderPay = request.getParameter("orderPay"); // 결제수단
String userID = (String)session.getAttribute("userID"); // 회원아이디
int lastOrderKey=0; // 마지막 주문정보테이블 기본키
int lastOrderDetailKey=0; // 마지막 주문상세테이블 기본키
int lastDeliveryKey=0; // 마지막 배송테이블 기본키
String deliveryList[] = {"한진택배", "롯데택배", "우체국택배","CJ대한통운택배"}; // 배송사 리스트
int deliveryNum[] = {111111,211111,311111,411111}; // 운송장번호
int deliveryMin = 0; // 현재배송사개수
int deliveryMinIdx = 0; // 선정배송사인덱스
PreparedStatement pstmt = null;
ResultSet rs = null;

// 배송일자 구하기
System.out.println(LocalDate.now().getYear());
        System.out.println(LocalDate.now().getMonth());
        System.out.println(LocalDate.now().getDayOfMonth());
int curYear = LocalDate.now().getYear();
int curMonth = 12;
int curDay = LocalDate.now().getDayOfMonth();
int devDay = curDay+2;
devDate=String.format("%d-%d-%d",curYear,curMonth,devDay);

// 주문총금액 구하기
for(Goods e : cartList) {
	total_price += (Integer.parseInt(e.getPrice())*e.getInputQuantity());
}
System.out.println("총가격: "+total_price);

//주문정보 새로 들어갈 자리 기본키
String sql = "SELECT count(*) from orderinfo";
pstmt=conn.prepareStatement(sql);
rs = pstmt.executeQuery();
while(rs.next()){
	lastOrderKey = Integer.parseInt(rs.getString("count(*)"));
}
System.out.println("주문정보 기본키: "+lastOrderKey);

// 주문상세 새로 들어갈 자리 기본키
sql = "SELECT count(*) from orderdetail";
pstmt=conn.prepareStatement(sql);
rs = pstmt.executeQuery();
while(rs.next()){
	lastOrderDetailKey = Integer.parseInt(rs.getString("count(*)"));
}
System.out.println("주문상세 기본키: "+lastOrderDetailKey);

// 배송 새로 들어갈 자리 기본키
sql = "SELECT count(*) from delivery";
pstmt=conn.prepareStatement(sql);
rs = pstmt.executeQuery();
while(rs.next()){
	lastDeliveryKey = Integer.parseInt(rs.getString("count(*)"));
}
System.out.println("배송 기본키: "+lastDeliveryKey);

// 가장 적게 업무하는 배송사 찾기
sql = "SELECT count(*) from delivery where DELIVERY_BZENT_NM=?";
pstmt=conn.prepareStatement(sql);
for(int i=0; i<4; i++){
	pstmt.setString(1, deliveryList[i]);
	rs=pstmt.executeQuery();
	while(rs.next()){
		int cnt = Integer.parseInt(rs.getString("count(*)"));
		if(i==0){
			deliveryMin=cnt;
		}
		else if(deliveryMin>cnt){
			deliveryMinIdx=i;
		}
	}
}
System.out.println("배송업체인덱스: "+deliveryMinIdx);

// 상품별 재고수량 상품객체에 넣기
sql = "SELECT * FROM inventory";
pstmt=conn.prepareStatement(sql);
rs=pstmt.executeQuery();
while(rs.next()){
	int id = Integer.parseInt(rs.getString("IVT_ID"));
	for(Goods e : cartList){
		if(e.getInventoryKey()==id){
			e.setQuantity(rs.getString("IVT_CNT"));
		}
	}
}

// 주문정보 레코드 삽입
sql = "INSERT INTO orderinfo values(?,?,?,?,?,?,?,?)";
pstmt=conn.prepareStatement(sql);
pstmt.setInt(1,lastOrderKey); // 주문정보코드
pstmt.setString(2,userID); // 회원아이디
pstmt.setString(3,curDate); // 주문일자
pstmt.setInt(4,total_price); // 주문총금액
pstmt.setInt(5,Integer.parseInt(orderPay)); // 결제수단
pstmt.setString(6,orderAddress); // 수령지
pstmt.setString(7,orderName); // 수령자
pstmt.setString(8,orderTel); // 수령인전화번호
pstmt.executeUpdate();
System.out.println("주문정보 레코드 삽입 성공");

// 배송 레코드 삽입
sql = "INSERT INTO delivery values(?,?,?,?,?,?)";
pstmt=conn.prepareStatement(sql);
pstmt.setInt(1,lastDeliveryKey); // 배송코드
pstmt.setInt(2,lastOrderKey); // 주문코드
pstmt.setString(3,devDate); // 배송일자
pstmt.setString(4,deliveryList[deliveryMinIdx]); // 배송업체
pstmt.setInt(5,deliveryNum[deliveryMinIdx]); // 운송장번호
pstmt.setInt(6,0); // 배송완료여부

pstmt.executeUpdate();
System.out.println("배송 레코드 삽입 성공");

// 주문상세 레코드 삽입
sql = "INSERT INTO orderdetail values(?,?,?,?,?)";
pstmt=conn.prepareStatement(sql);
for(Goods e : cartList){
	pstmt.setInt(1,lastOrderDetailKey++);
	pstmt.setInt(2,lastOrderKey);
	pstmt.setInt(3,e.getInventoryKey());
	pstmt.setInt(4,e.getInputQuantity());
	pstmt.setInt(5,0);
	pstmt.executeUpdate();
}
System.out.println("주문상세 레코드 삽입 성공");

// 선택 상품 재고 수량 갱신
sql = "UPDATE inventory SET IVT_CNT=? WHERE IVT_ID=?";
pstmt=conn.prepareStatement(sql);
for(Goods e : cartList){
	pstmt.setInt(1,Integer.parseInt(e.getQuantity())-e.getInputQuantity());
	pstmt.setInt(2,e.getInventoryKey());
	pstmt.executeUpdate();
}

session.removeAttribute("cartlist");

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<title>CheckCheaper</title>\r\n");
      out.write("<!-- Bootstrap CDN -->\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.6.3.min.js\" integrity=\"sha256-\r\n");
      out.write("pvPw+upLPUjgMXY0G+8O0xUf+/Im1MZjXxxgOcBQBXU=\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css\" integrity=\"sha384-\r\n");
      out.write("xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N\" crossorigin=\"anonymous\">\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js\"\r\n");
      out.write("integrity=\"sha384-Fy6S3B9q64WdZWQUiU+q4/2Lc9npb8tCaSX9FK7E8HnRr0Jz8D6OP9dO5Vg3Q9ct\"\r\n");
      out.write("crossorigin=\"anonymous\"></script>\r\n");
      out.write("<!-- CSS -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/footer.css\" type=\"text/css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/dash_section_input.css\" type=\"text/css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");
      out.write('\r');
      out.write('\n');
      out.write('	');
      out.write('\r');
      out.write('\n');

String memberType = (String)session.getAttribute("userType");

      out.write("\r\n");
      out.write("<nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n");
      out.write("  <div class=\"container-fluid\">\r\n");
      out.write("    <a class=\"navbar-brand\" href=\"./login.jsp\">logout</a>\r\n");
      out.write("    <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n");
      out.write("      <span class=\"navbar-toggler-icon\"></span>\r\n");
      out.write("      ");
      out.write("\r\n");
      out.write("      <a class=\"navbar-brand\" href=\"dash.jsp?flag=0\">Home</a>\r\n");
      out.write("      <a class=\"navbar-brand\" href=\"order_history.jsp\">Past Order</a>\r\n");
      out.write("      <a class=\"navbar-brand\" href=\"#\">Book Mark</a>\r\n");
      out.write("      <a class=\"navbar-brand\" href=\"cart.jsp\">Cart</a>\r\n");
      out.write("    </button>\r\n");
      out.write("    <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n");
      out.write("      <ul class=\"navbar-nav\">\r\n");
      out.write("        <li class=\"nav-item\">\r\n");
      out.write("          <a class=\"nav-link active\" aria-current=\"page\" href=\"dash.jsp?flag=0\">Home</a>\r\n");
      out.write("        </li>\r\n");
      out.write("        <li class=\"nav-item\">\r\n");
      out.write("          <a class=\"nav-link\" href=\"#\">즐겨찾기</a>\r\n");
      out.write("        </li>\r\n");
      out.write("        <li class=\"nav-item\">\r\n");
      out.write("          <a class=\"nav-link\" href=\"order_history.jsp\">주문내역</a>\r\n");
      out.write("        </li>\r\n");
      out.write("        <li class=\"nav-item\">\r\n");
      out.write("          <a class=\"nav-link\" href=\"cart.jsp\">장바구니</a>\r\n");
      out.write("        </li>\r\n");
      out.write("        ");

        if(memberType.equals("store")){
        
      out.write("\r\n");
      out.write("        <li class=\"nav-item\">\r\n");
      out.write("          <a class=\"nav-link\" href=\"request_goods.jsp\">상품요청</a>\r\n");
      out.write("        </li>\r\n");
      out.write("        <li class=\"nav-item\">\r\n");
      out.write("          <a class=\"nav-link\" href=\"store_inventory.jsp\">재고관리</a>\r\n");
      out.write("        </li>\r\n");
      out.write("        <li class=\"nav-item\">\r\n");
      out.write("          <a class=\"nav-link\" href=\"store_release.jsp\">출고관리</a>\r\n");
      out.write("        </li>\r\n");
      out.write("        ");

        }
        
      out.write("\r\n");
      out.write("        ");

        if(memberType.equals("admin")){
        
      out.write("\r\n");
      out.write("        <li class=\"nav-item\">\r\n");
      out.write("          <a class=\"nav-link\" href=\"confirm_request_goods.jsp\">상품요청확인</a>\r\n");
      out.write("        </li>\r\n");
      out.write("        ");

        }
        
      out.write("\r\n");
      out.write("      </ul>\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("</nav>");
      out.write('\r');
      out.write('\n');
      out.write('	');
      out.write("\r\n");
      out.write("	<div class=\"jumbotron\">\r\n");
      out.write("		<div class=\"container\">\r\n");
      out.write("			<h1 class=\"display-2\"><strong>Thank you for buying!</strong></h1>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	<div class=\"container\">\r\n");
      out.write("		<div class=\"container\">\r\n");
      out.write("			<div class=\"text-center\">\r\n");
      out.write("				");

				out.println("<h3>");
				out.println("Hello, "+userID+"! You can check to your current order!");
				out.println("</h3>");
				
      out.write("\r\n");
      out.write("				<br><br>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	<section>\r\n");
      out.write("		<div class=\"container\">\r\n");
      out.write("			<div class=\"alert alert-success\" role=\"alert\">\r\n");
      out.write("			  <h4 class=\"alert-heading\">주문완료!</h4>\r\n");
      out.write("			  <p>현재까지의 주문 내역을 확인하고 싶다면 <a href=\"order_history.jsp\" class=\"alert-link\">여기</a>를 클릭하세요!</p>\r\n");
      out.write("			  <hr>\r\n");
      out.write("			  <p class=\"mb-0\">배송정보, 주문번호를 간단하게 아래 박스에서 확인할 수 있습니다.</p>\r\n");
      out.write("			</div>\r\n");
      out.write("			<hr>\r\n");
      out.write("			<div class=\"row\">\r\n");
      out.write("				<div class=\"col-sm-6\">\r\n");
      out.write("					<div class=\"card\">\r\n");
      out.write("						<div class=\"card-body\">\r\n");
      out.write("							<h5 class=\"cart-title\">주문코드</h5>\r\n");
      out.write("							<p class=\"cart-text\">");
      out.print(lastOrderKey );
      out.write("</p>\r\n");
      out.write("						</div>\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"col-sm-6\">\r\n");
      out.write("					<div class=\"card\">\r\n");
      out.write("						<div class=\"card-body\">\r\n");
      out.write("							<h5 class=\"cart-title\">배송정보</h5>\r\n");
      out.write("							<ul class=\"list-group list-group-flush\">\r\n");
      out.write("								<li class=\"list-group-item\">배송업체: ");
      out.print(deliveryList[deliveryMinIdx] );
      out.write("</li>\r\n");
      out.write("								<li class=\"list-group-item\">배송일자: ");
      out.print(devDate );
      out.write("</li>\r\n");
      out.write("								<li class=\"list-group-item\">운송장번호: ");
      out.print(deliveryNum[deliveryMinIdx] );
      out.write("</li>\r\n");
      out.write("							</ul>\r\n");
      out.write("						</div>\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"container\">\r\n");
      out.write("			<button type=\"button\" class=\"btn btn-outline-dark\">\r\n");
      out.write("				<a href=\"dash.jsp?flag=0\">Home으로 돌아가기</a>\r\n");
      out.write("			</button>\r\n");
      out.write("		</div>\r\n");
      out.write("	</section>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
 
if(rs!=null){
	rs.close();
}
if(pstmt!=null){
	pstmt.close();
}
if(conn!=null){
	conn.close();
}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
